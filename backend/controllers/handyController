const { v4: uuidv4 } = require("uuid");

exports.registerHandyman = (req, res) => {
  const {
    handy_name,
    handy_user_name,
    phone_number,
    h_email,
    h_bio,
    h_field,
    h_photo,
    h_password,
    h_fee,
    h_citizenship_photo,
    h_expertise,
  } = req.body;

  if (
    !handy_name ||
    !handy_user_name ||
    !phone_number ||
    !h_email ||
    !h_bio ||
    !h_field ||
    !h_photo ||
    !h_password ||
    !h_fee ||
    !h_citizenship_photo ||
    !h_expertise
  ) {
    return res
      .status(400)
      .json({ message: "Please provide all required fields." });
  }

  // Insert the new handyman into the database
  const pool = req.pool;
  const handyId = uuidv4();

  const query = `
    INSERT INTO handyman (
      handy_id, handy_name, handy_user_name, phone_number, h_email, h_bio, h_field, h_photo, h_password, h_fee, h_citizenship_photo, h_expertise
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `;
  const values = [
    handyId,
    handy_name,
    handy_user_name,
    phone_number,
    h_email,
    h_bio,
    h_field,
    h_photo,
    h_password,
    h_fee,
    h_citizenship_photo,
    h_expertise,
  ];

  pool.query(query, values, (error, results) => {
    if (error) {
      console.error("Error registering handyman:", error);
      if (!res.headersSent) {
        return res
          .status(500)
          .json({ message: "Error registering handyman.", error });
      }
    } else {
      if (!res.headersSent) {
        return res
          .status(201)
          .json({ message: "Handyman registered successfully." });
      }
    }
  });
};

exports.getHandymanInfo = (req, res) => {
  const { handyId } = req.params;

  // Validate the handymanId
  if (!handyId) {
    return res.status(400).json({ message: "Handyman ID is required." });
  }

  // Query the handyman info from the database
  const pool = req.pool;

  const query = `
    SELECT handy_id, handy_name, handy_user_name, phone_number, h_email, h_bio, h_field, h_photo, h_fee, h_citizenship_photo, h_expertise
    FROM handyman
    WHERE handy_id = ?
  `;

  pool.query(query, [handyId], (error, results) => {
    if (error) {
      console.error("Error retrieving handyman info:", error);
      return res
        .status(500)
        .json({ message: "Error retrieving handyman info.", error });
    } else if (results.length === 0) {
      return res.status(404).json({ message: "Handyman not found." });
    } else {
      return res.status(200).json(results[0]);
    }
  });
};

exports.loginHandy = (req, res) => {
  const { email, password: checkPassword } = req.body;
  const pool = req.pool;
  pool.getConnection((err, connection) => {
    if (err) throw err;
    connection.query(
      "SELECT handy_id,email,password FROM user WHERE email=?",
      [email],
      async (err, result) => {
        connection.release();
        if (err) {
          // Handle the error
          console.log("Error retrieving user:", err);
          return res
            .status(500)
            .json({ status: "error", error: "Internal Server Error" });
        }
        if (result.length === 0) {
          // If user not found, send appropriate response
          return res
            .status(404)
            .json({ status: "error", error: "User not found" });
        }
        if (result.length === 1) {
          const storedPassword = result[0].password;
          const storedEmail = result[0].email;
          const stored_handy_id = result[0].handy_id;
          // console.log(handy_id);
          try {
            const passwordsMatch = await comparePassword(
              checkPassword,
              storedPassword,
            );
            if (passwordsMatch) {
              const token = createToken(stored_handy_id, email);
              res.cookie("jwt", token, {
                // domain: "localhost",
                httpOnly: true,
                maxAge: maxAge * 1000,
              });
              res.json({ status: "success", handy_id: stored_handy_id });
            } else {
              return res
                .status(401)
                .json({ status: "error", error: "Incorrect Password" });
            }
          } catch (error) {
            console.error("Error comparing passwords:", error);
            return res
              .status(500)
              .json({ status: "error", error: "Internal Server Error" });
          }
        }
      },
    );
  });
};
